package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"bingo/graph/model"
	"bingo/internal/app/bingoCard"
	"bingo/internal/middlewares/auth"
	"bingo/internal/models"
	"context"
	"fmt"
	"log"

	"go.mongodb.org/mongo-driver/mongo"
)

// AddLotteryNumber is the resolver for the addLotteryNumber field.
func (r *mutationResolver) AddLotteryNumber(ctx context.Context, number int) (int, error) {
	user := auth.ForContext(ctx)
	if user == nil || user.Role != string(models.RoleAdmin) {
		return 0, fmt.Errorf("Access Denied")
	}

	return bingoCard.AddLotteryNumber(number), nil
}

// DeleteLastLotteryNumber is the resolver for the deleteLastLotteryNumber field.
func (r *mutationResolver) DeleteLastLotteryNumber(ctx context.Context) (bool, error) {
	user := auth.ForContext(ctx)
	if user == nil || user.Role != string(models.RoleAdmin) {
		return false, fmt.Errorf("Access Denied")
	}

	return bingoCard.DeleteLastLotteryNumber(), nil
}

// ResetLotteryNumbers is the resolver for the resetLotteryNumbers field.
func (r *mutationResolver) ResetLotteryNumbers(ctx context.Context) (bool, error) {
	user := auth.ForContext(ctx)
	if user == nil || user.Role != string(models.RoleAdmin) {
		return false, fmt.Errorf("Access Denied")
	}

	return bingoCard.ResetLottery(), nil
}

// BingoCard is the resolver for the bingoCard field.
func (r *queryResolver) BingoCard(ctx context.Context) (*model.BingoCard, error) {
	log.Printf("User get bingo card")

	user := auth.ForContext(ctx)
	if user == nil || user.Role != string(models.RolePlayer) {
		return &model.BingoCard{}, fmt.Errorf("Access Denied")
	}
	log.Printf("User get bingo card with id: %s, name: %s", user.ID, user.Name)

	if user.Numbers != nil {
		return &model.BingoCard{Numbers: user.Numbers}, nil
	}
	return nil, fmt.Errorf("System Error occur.")
}

// ValidateCard is the resolver for the validateCard field.
func (r *queryResolver) ValidateCard(ctx context.Context, id string) (*model.ValidateResult, error) {
	log.Printf("ValidateCard(id: %s)", id)

	user := auth.ForContext(ctx)
	if user == nil || user.Role != string(models.RoleAdmin) {
		return &model.ValidateResult{}, fmt.Errorf("Access Denied")
	}

	// query user
	userForValidate, err := r.userRepository.FindUserByID(id)
	if err == mongo.ErrNoDocuments {
		log.Printf("User not found %s", id)
		return nil, fmt.Errorf("UserId not correct")
	}
	if err != nil {
		fmt.Printf("MongoDB error: %s", err)
		return nil, fmt.Errorf("System Error occur.")
	}

	if userForValidate.Numbers != nil {
		validBingo := bingoCard.ValidateBingoCard(userForValidate.Numbers)
		return validBingo, nil
	}
	return nil, fmt.Errorf("System Error occur.")
}

// LotteryNumbers is the resolver for the lotteryNumbers field.
func (r *queryResolver) LotteryNumbers(ctx context.Context) ([]int, error) {
	user := auth.ForContext(ctx)
	if user == nil || user.Role != string(models.RoleAdmin) {
		return []int{}, fmt.Errorf("Access Denied")
	}

	return bingoCard.GetLotteryNumbers(), nil
}
